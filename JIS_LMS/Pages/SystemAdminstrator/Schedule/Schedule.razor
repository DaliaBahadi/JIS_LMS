@*Page Name:Schedule Page
    Page Description: This page allow the user to view the library schedule, add and edit time slots,and direct the user to the add schedule page *@


@page "/Schedule"
@layout SystemAdminLayout
@using Radzen
@using JIS_LMS.Data;
@using JIS_LMS.Model;
@inject DialogService DialogService
@inject TimeSlotService MyAppointmentService




<a href="/Schedule/Add" style=" margin-top: 80px;color:#013E7E;font-weight: bolder;">
    <h4 style="margin-left:1em"> <i class="oi oi-plus"></i> Add New Schedule</h4>
</a>


<br>

@*<RadzenExample Name="Scheduler" AdditionalSourceCodePages=@(new List<string>() {"AddAppointmentPage.razor", "EditAppointmentPage.razor" }) />*@

<div class="row" style="margin-left:1em">

    <div class="col-xl-6">

        <RadzenScheduler @ref=@scheduler style="height: 740px; width:1500px" Data="@data" TItem="Time_Slot" StartProperty="StartTime" EndProperty="EndTime" TextProperty="Text" LoadData="@OnLoadData" SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect>



            <RadzenMonthView />

            <RadzenWeekView />

            <RadzenDayView />



        </RadzenScheduler>

    </div>

</div>
<br>
<br>
@*</RadzenExample>*@



@code {

    RadzenScheduler<Time_Slot> scheduler;



    //class DataItem

    //{

    //  public DateTime Start { get; set; }

    //  public DateTime End { get; set; }

    //  public string Text { get; set; }

    //}



    // DataItem[] data = new DataItem[]

    // {

    //new DataItem

    //{

    // Start = DateTime.Today,

    // End = DateTime.Today.AddDays(1),

    // Text = "Birthday"

    //},

    // };



    //Time_Slot []data = new Time_Slot[]

    // {

    //new Time_Slot

    //{

    // StartTime = DateTime.Today,

    // EndTime = DateTime.Today.AddDays(1),

    // Text = "Birthday"

    //},

    // };



    IEnumerable<Time_Slot> data;



    async void OnLoadData(SchedulerLoadDataEventArgs args)

    {

        // Get the appointments for between the Start and End

        //data = await MyAppointmentService.GetAppointments(args.Start, args.End);

        data = await MyAppointmentService.GetAppointments();

    }







    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)

    {



        //Time_Slot data = await DialogService.OpenAsync<AddAppointmentPage>("Add Time_Slot",

        //new Dictionary<string, object> { { "StartTime", args.Start }, { "EndTime", args.End } });



        if (data != null)

        {

            //MyAppointmentService.AddNewAppointment(data);

            // Either call the Reload method or reassign the Data property of the Scheduler

            await scheduler.Reload();

        }

    }



    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Time_Slot> args)

    {

        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");



        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Time_Slot", args.Data } });



        await scheduler.Reload();

    }



}