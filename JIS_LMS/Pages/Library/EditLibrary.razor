@page "/Library/Edit/{Id:int}"
@layout SystemAdminLayout
@using JIS_LMS.Data;
@using JIS_LMS.Model;
@inject NavigationManager NavigationManager
@inject LibraryService LibraryService
@inject AddressService AddressService
@inject LMSDbContext DbContext

<div class="container-fluid container-contact100">
    <div class="wrap-contact100">
        <h3>Edit Library Information</h3>
        <fieldset>

            <EditForm Model="library" OnValidSubmit="UpdateLibrary">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">*Name:</label>
                    <InputText id="name" @bind-Value="library.Name" class="form-control" placeholder="Enter library Name" />
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Section:</span>
                        <RadzenDropDown Data="section" @bind-Value="librarySection" Change="ChooseSection" Placeholder="Select Section" />
                    </label>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Status:</span>
                        <RadzenDropDown Data="@status" @bind-Value="@libraryStatus" Change="ChooseStatus" Placeholder="Select Status" />
                    </label>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Address:</span>
                        <RadzenDropDown AllowClear="true" TValue="int"
                                        LoadData="@LoadData" AllowFiltering="true" Placeholder="Select Address"
                                        Data="@libraryAddress" TextProperty="StreetName" ValueProperty="AddressId" Style="margin-bottom: 20px" @bind-Value="library.AddressId"
                                        Change="@(args => Change(args, "DropDown with custom filtering"))" />
                    </label>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Library Employee:</span>
                        <RadzenDropDown AllowClear="true" TValue="int"
                                        LoadData="@EmployeeLoadData" AllowFiltering="true" Placeholder="Select Library Employee"
                                        Data="@libraryEmployee" TextProperty="FullName" ValueProperty="EmployeeId" Style="margin-bottom: 20px" @bind-Value="library.LibrarianId"
                                        Change="@(args => EmployeeChange(args, "DropDown with custom filtering"))" />
                    </label>
                </div>


                <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                <a href="/Libraries/Search" class="btn btn-outline-secondary">Cancel</a>
                <div class="mt-4"></div>
            </EditForm>
        </fieldset>
    </div>
</div>



<br />

<p>@message</p>

@code {

    [Parameter]
    public int Id { get; set; }

    Library library = new Library();

    string message;

    protected override void OnInitialized()
    {
        library = LibraryService.GetLibrary(Id);

    }




    public void UpdateLibrary()
    {

        // Edit library
        LibraryService.EditLibrary(library);

        message = "Library/Address updated successfully";
        NavigationManager.NavigateTo("Libraries/Search");
    }
}


@code{

    IEnumerable<Address> libraryAddress;
    IEnumerable<Employee> libraryEmployee;

    void Change(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void LoadData(LoadDataArgs args)
    {
        var query = DbContext.Address.AsQueryable();

        libraryAddress = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    void EmployeeChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void EmployeeLoadData(LoadDataArgs args)
    {
        var query = DbContext.Employee.AsQueryable();

        libraryEmployee = query.ToList();

        InvokeAsync(StateHasChanged);
    }


    //Code for section drop down list
    IEnumerable<LibrarySection> section = Enum.GetValues(typeof(LibrarySection)).Cast<LibrarySection>();

    int sectionValue;

    LibrarySection librarySection;

    //Method For biding the value to the database
    public void ChooseSection()
    {
        sectionValue = (int)librarySection;
        library.Section = sectionValue;
    }

    //Code for status drop down list
    IEnumerable<LibraryStatus> status = Enum.GetValues(typeof(LibraryStatus)).Cast<LibraryStatus>();

    int statusValue;

    LibraryStatus libraryStatus;

    //Method For biding the value to the database
    public void ChooseStatus()
    {
        statusValue = (int)libraryStatus;
        library.Status = statusValue;
    }



}
