@*Page Name:Edit Patron
    Page Description: This page is for edting a patron information*@

@page  "/P/Edit/{Id:int}"
@layout SystemAdminLayout
@using JIS_LMS.Data;
@using JIS_LMS.Model;
@inject NavigationManager NavigationManager
@inject PatronService PatronService
@inject StudentService StudentService
@inject TeacherService TeacherService
@inject LMSDbContext DbContext


<div class="container-fluid container-contact100">
    <div class="wrap-contact100">
        <h3>Edit Patron Information</h3>
        <fieldset>

            <EditForm Model="patron" OnValidSubmit="UpdatePatron">
                <DataAnnotationsValidator />
                <ValidationSummary />


                <div class="form-group">
                    <label for="first-name">*First Name:</label>
                    <InputText id="first-name" @bind-Value="patron.FirstName" class="form-control" placeholder="Enter Patron Fisrt Name" />
                </div>

                <div class="form-group">
                    <label for="middle-name">Middle Name:</label>
                    <InputText id="middle-name" @bind-Value="patron.MiddleName" class="form-control" placeholder="Enter Patron Middle Name" />
                </div>

                <div class="form-group">
                    <label for="last-name">*Last Name:</label>
                    <InputText id="last-name" @bind-Value="patron.LastName" class="form-control" placeholder="Enter Patron Last Name" />
                </div>



                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Gender:</span>
                        <RadzenDropDown Data="@gender" @bind-Value="@patronGender" Change="ChooseGender" />
                    </label>
                </div>

                <div class="form-group">
                    <label for="dateOfBirth">*Date Of Birth:</label>
                    <InputDate id="date" @bind-Value="patron.DateOfBirth" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="Primary Contact Number">*Primary Contact Number:</label>
                    <InputText id="Primary Contact Number" @bind-Value="patron.PrimaryContactNumber" class="form-control" placeholder="05xxxxxxxx" />
                </div>

                <div class="form-group">
                    <label for="Secondary Contact Number">Secondary Contact Number:</label>
                    <InputText id="Secondary Contact Number" @bind-Value="patron.SecondaryContactNumber" class="form-control" placeholder="05xxxxxxxx" />
                </div>

                <div class="form-group">
                    <label for="email" class="control-label">*Primary Email: </label>
                    <InputText type="email" id="email" @bind-Value="patron.PrimaryEmail" class="form-control" placeholder="sam@example.com" />
                    <ValidationMessage For="@(() => patron.PrimaryEmail)" />
                </div>

                <div class="form-group">
                    <label for="email" class="control-label">Secondary Email: </label>
                    <InputText type="email" id="email" @bind-Value="patron.SecondaryEmail" class="form-control" placeholder="sam@example.com" />
                    <ValidationMessage For="@(() => patron.SecondaryEmail)" />
                </div>


                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Language:</span>
                        <RadzenDropDown Data="@language" @bind-Value="@patronLanguage" Style="align-items:center" Change="ChooseLanguage" />
                    </label>
                </div>


                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Section:</span>
                        <RadzenDropDown Data="section" @bind-Value="@patronSection" Style="align-items:center" Change="ChooseSection" />
                    </label>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Status:</span>
                        <RadzenDropDown Data="@status" @bind-Value="@patronStatus" Style="align-items:center" Change="ChooseStatus" />
                    </label>
                </div>


                <div class="form-group">
                    <label for="registration-date">*Registration Date:</label>
                    <InputDate id="date" @bind-Value="patron.RegistrationDate" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="username">*Username:</label>
                    <InputText id="username" @bind-Value="patron.UserName" class="form-control" placeholder="Enter Patron Username" />
                </div>

                <div class="form-group">
                    <label for="password">*Password:</label>
                    <InputText type="password" id="password" @bind-Value="patron.Password" class="form-control" placeholder="Enter Patron Password" />
                </div>

                <div class="form-group">
                    <label for="type">*Patron Type: </label>
                    <Select @onchange="patronChange">
                        <option value="">Select Type</option>
                        @foreach (var type in Enum.GetValues(typeof(PatronType)))
                        {


                            <option value="@(type)"> @(type)</option>
                        }
                    </Select>
                </div>
                <br>


                <div class="form-group">
                    <label for="type">Image File: </label>
                    <RadzenFileInput @bind-Value="patron.ImageFile" Style="width:400px" TValue="string" />

                </div>
                <br>

                <div class="form-group">
                    <label for="remark">Remark: </label>
                    <RadzenTextArea @bind-Value="patron.Remark" Cols="30" Rows="3" Style="align-items:center" />
                </div>

                <br>
                <div class="form-group">
                    <label style="display: flex; align-items: center" for="library">
                        <span style="margin-right: 32px">*Library: </span>
                        <RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Library"
                                        LoadData="@LibraryLoadData" AllowFiltering="true"
                                        Data="@patronLibrary" TextProperty="Name" ValueProperty="LibraryId" Style="margin-bottom: 20px" @bind-Value="patron.LibraryId"
                                        Change="@(args => LibraryChange(args, "DropDown with custom filtering"))" />
                    </label>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Address:</span>
                        <RadzenDropDown AllowClear="true" TValue="int"
                                        LoadData="@LoadData" AllowFiltering="true"
                                        Data="@patronAddress" TextProperty="StreetName" ValueProperty="AddressId" Style="margin-bottom: 20px" Placeholder="Select..." @bind-Value="patron.AddressId"
                                        Change="@(args => Change(args, "Address DropDown "))" />
                    </label>
                </div>

                <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                <a href="/Patrons/Search" class="btn btn-outline-secondary">Cancel</a>
                <div class="mt-4"></div>
            </EditForm>
        </fieldset>
    </div>
</div>


<br />

<p>@message</p>

<div class="container-fluid container-contact100" style="visibility:@Studentvisible;margin-top:100px">
    <div class="wrap-contact100">

        <fieldset>
            <h3>Edit Student Information</h3>
            <EditForm Model="student" OnValidSubmit="UpdateStudent">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="student-id">*Student Id:</label>
                    <InputNumber id="student-id" @bind-Value="student.StudentId" class="form-control" placeholder="Enter Student school Id" disabled />
                </div>

                <div class="form-group">
                    <label for="year">*Class Year:</label>
                    <InputText id="year" @bind-Value="student.ClassYear" class="form-control" placeholder="Enter Student's Class Year" />
                </div>


                <div class="form-group">
                    <label for="class-name">*Class Name:</label>
                    <InputText id="class-name" @bind-Value="student.ClassName" class="form-control" placeholder="Enter Student's Class Name" />
                </div>

                <div class="form-group">
                    <label for="home-room-teacher">*Home Room Teacher Name:</label>
                    <InputText id="home-room-teacher" @bind-Value="student.HomeRoomTeacher" class="form-control" placeholder="Enter Student's Home Room Teacher Name" />
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Age Level:</span>
                        <RadzenDropDown Data="@ageLevel" @bind-Value="@studentAgeLevel" Change="ChooseAgeLevel" />
                    </label>
                </div>

                <div class="mt-4"></div>
                <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                <a href="/Patrons/Search" class="btn btn-outline-secondary">Cancel</a>
            </EditForm>
        </fieldset>
    </div>
</div>
<br>
<br>

<p>@studentMessage</p>

<div class="container-fluid container-contact100" style="visibility:@Teachervisible;margin-bottom:1000px;margin-top:-900px">
    <div class="wrap-contact100">
        <fieldset>
            <h3>Edit Teacher Information</h3>

            <EditForm Model="teacher" OnValidSubmit="UpdateTeacher">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="student-id">*Employee Id:</label>
                    <InputNumber id="student-id" @bind-Value="teacher.EmployeeId" class="form-control" placeholder="Enter Employee school Id" disabled />
                </div>

                <div class="mt-4"></div>
                <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                <a href="/Patrons/Search" class="btn btn-outline-secondary">Cancel</a>
            </EditForm>
        </fieldset>
    </div>
</div>
@*<br>
<br>*@





@code
{
    //code section to update infromation of both patron, student, and Teacher

    [Parameter]
    public int Id { get; set; }

    Patron patron = new Patron();

    string message;

    Student student = new Student();

    string studentMessage;

    Teacher teacher = new Teacher();

    int typeOfPatron;

    // Execute when component starts / initializes
    protected override void OnInitialized()
    {
        patron = PatronService.GetPatron(Id);

        typeOfPatron = patron.PatronType;

        //check if patron is student or teacher to show the correct infromation
        if (typeOfPatron == 1)
        {
            student = StudentService.GetStudent(Id);
        }

        else if (typeOfPatron == 2)
        {
            teacher = TeacherService.GetTeacher(Id);
        }

    }


    //Method to update patron information
    public void UpdatePatron()
    {

        // Edit Patron
        PatronService.EditPatron(patron);

        message = "Patron updated successfully";

    }


    //Method to update Student information
    public void UpdateStudent()
    {

        // Edit  Student
        StudentService.EditStudent(student);

        studentMessage = "Student updated successfully";
        NavigationManager.NavigateTo("Patrons/Search");
    }

    //Method to update Teacher information
    public void UpdateTeacher()
    {

        // Edit Teacher
        TeacherService.EditTeacher(teacher);

        studentMessage = "Teacher updated successfully";
        NavigationManager.NavigateTo("Patrons/Search");
    }

}


@code {

    //code section for input select patron type

    LMSDbContext db = new LMSDbContext();

    string patronType { get; set; }

    string Studentvisible = "hidden";
    string Teachervisible = "hidden";

    private List<Student> StudentForm;


    //Method to change patron type
    private void patronChange(ChangeEventArgs patronEvent)
    {
        patronType = (patronEvent.Value.ToString());

        if (patronType == "Student")
        {
            Studentvisible = "visible";

        }

        else if (patronType == "Teacher")
        {
            Teachervisible = "visible";
            Studentvisible = "hidden";
        }

    }
}

@code{

    //Code Section for DropDown Lists

    //Address Drop Down List Methods

    IEnumerable<Address> patronAddress;

    void Change(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void LoadData(LoadDataArgs args)
    {
        var query = DbContext.Address.AsQueryable();


        patronAddress = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //Library Drop Down List Methods

    IEnumerable<Library> patronLibrary;

    void LibraryChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void LibraryLoadData(LoadDataArgs args)
    {
        var query = DbContext.Library.AsQueryable();

        patronLibrary = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //Code for gender drop down list
    IEnumerable<PatronGender> gender = Enum.GetValues(typeof(PatronGender)).Cast<PatronGender>();

    int genderValue;

    PatronGender patronGender;

    //Method For biding the value to the database
    public void ChooseGender()
    {
        genderValue = (int)patronGender;
        patron.Gender = genderValue;
    }

    //Code for language drop down list
    IEnumerable<PatronLanguage> language = Enum.GetValues(typeof(PatronLanguage)).Cast<PatronLanguage>();

    int languageValue;

    PatronLanguage patronLanguage;

    //Method For biding the value to the database
    public void ChooseLanguage()
    {
        languageValue = (int)patronLanguage;
        patron.Language = languageValue;
    }


    //Code for patron type drop down list
    //IEnumerable<PatronType> type = Enum.GetValues(typeof(PatronType)).Cast<PatronType>();

    //int typeValue;

    //PatronType typeOfPatron;

    ////Method For biding the value to the database
    //public void ChooseType()
    //{
    //    typeValue = (int)typeOfPatron;
    //    patron.PatronType = typeValue;
    //}

    //Code for section drop down list
    IEnumerable<PatronSection> section = Enum.GetValues(typeof(PatronSection)).Cast<PatronSection>();

    int sectionValue;

    PatronSection patronSection;

    //Method For biding the value to the database
    public void ChooseSection()
    {
        sectionValue = (int)patronSection;
        patron.Section = sectionValue;
    }

    //Code for status drop down list
    IEnumerable<PatronStatus> status = Enum.GetValues(typeof(PatronStatus)).Cast<PatronStatus>();

    int statusValue;

    PatronStatus patronStatus;

    //Method For biding the value to the database
    public void ChooseStatus()
    {
        statusValue = (int)patronStatus;
        patron.Status = statusValue;
    }


    //Code for age level drop down list
    IEnumerable<StudentAgeLevel> ageLevel = Enum.GetValues(typeof(StudentAgeLevel)).Cast<StudentAgeLevel>();

    int ageLevelValue;

    StudentAgeLevel studentAgeLevel;

    //Method For biding the value to the database
    public void ChooseAgeLevel()
    {
        ageLevelValue = (int)studentAgeLevel;
        student.AgeLevel = ageLevelValue;
    }



}

