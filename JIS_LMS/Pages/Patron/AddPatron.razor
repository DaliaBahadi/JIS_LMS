@*Page Name: Add Patron
  Page Description: This page is for adding a patron*@

@page "/Patron/Add"
@layout SystemAdminLayout
@using JIS_LMS.Data;
@using JIS_LMS.Model;
@inject PatronService PatronService
@inject StudentService StudentService
@inject TeacherService TeacherService
@inject AddressService AddressService
@inject NavigationManager NavigationManager
@inject LMSDbContext DbContext
@inject Services.SharedVariablesService SharedVariables


<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Add Address">
            <div class="container-fluid container-contact100">
                <div class="wrap-contact100">
                    <h3>Add Patron Address</h3>
                    <fieldset>
                        <EditForm Model="address" OnValidSubmit="CreateAddress">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="building-number">*Building Number:</label>
                                <InputNumber id="building-number" @bind-Value="address.BuildingNumber" class="form-control" placeholder="Enter Building Number" />
                            </div>

                            <div class="form-group">
                                <label for="unit-number">Unit Number:</label>
                                <InputNumber id="unit-number" @bind-Value="address.UnitNumber" class="form-control" placeholder="Enter Unit Number" />
                            </div>

                            <div class="form-group">
                                <label for="street-name">*Street Name:</label>
                                <InputText id="street-name" @bind-Value="address.StreetName" class="form-control" placeholder="Enter Street Name" />
                            </div>

                            <div class="form-group">
                                <label for="zip-code">Zip Code:</label>
                                <InputText id="zip-code" @bind-Value="address.ZipCode" class="form-control" placeholder="Enter Zip Code" />
                            </div>

                            <div class="form-group">
                                <label for="city">*City:</label>
                                <InputText id="city" @bind-Value="address.City" class="form-control" placeholder="Enter City" />
                            </div>

                            <div class="form-group">
                                <label for="country">*Country:</label>
                                <InputText id="country" @bind-Value="address.Country" class="form-control" placeholder="Enter Country" />
                            </div>
                            <br />


                            <div class="mt-4"></div>
                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Parents" class="btn btn-outline-secondary">Cancel</a>
                        </EditForm>
                    </fieldset>
                </div>
            </div>
            <br><br><br>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Add Patron">
            <div class="container-fluid container-contact100">
                <div class="wrap-contact100">
                    <h3>Add New Patron </h3>
                    <fieldset>
                        <EditForm Model="patron" OnValidSubmit="CreatePatron">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="first-name">*First Name:</label>
                                <InputText id="first-name" @bind-Value="patron.FirstName" class="form-control" placeholder="Enter Patron Fisrt Name" />
                            </div>

                            <div class="form-group">
                                <label for="middle-name">Middle Name:</label>
                                <InputText id="middle-name" @bind-Value="patron.MiddleName" class="form-control" placeholder="Enter Patron Middle Name" />
                            </div>

                            <div class="form-group">
                                <label for="last-name">*Last Name:</label>
                                <InputText id="last-name" @bind-Value="patron.LastName" class="form-control" placeholder="Enter Patron Last Name" />
                            </div>



                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Gender:</span>
                                    <RadzenDropDown Data="@gender" @bind-Value="@patronGender" Change="ChooseGender" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label for="dateOfBirth">*Date Of Birth:</label>
                                <InputDate id="date" @bind-Value="patron.DateOfBirth" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="Primary Contact Number">*Primary Contact Number:</label>
                                <InputText id="Primary Contact Number" @bind-Value="patron.PrimaryContactNumber" class="form-control" placeholder="05xxxxxxxx" />
                            </div>

                            <div class="form-group">
                                <label for="Secondary Contact Number">Secondary Contact Number:</label>
                                <InputText id="Secondary Contact Number" @bind-Value="patron.SecondaryContactNumber" class="form-control" placeholder="05xxxxxxxx" />
                            </div>

                            <div class="form-group">
                                <label for="email" class="control-label">*Primary Email: </label>
                                <InputText type="email" id="email" @bind-Value="patron.PrimaryEmail" class="form-control" placeholder="sam@example.com" />
                                <ValidationMessage For="@(() => patron.PrimaryEmail)" />
                            </div>

                            <div class="form-group">
                                <label for="email" class="control-label">Secondary Email: </label>
                                <InputText type="email" id="email" @bind-Value="patron.SecondaryEmail" class="form-control" placeholder="sam@example.com" />
                                <ValidationMessage For="@(() => patron.SecondaryEmail)" />
                            </div>


                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Language:</span>
                                    <RadzenDropDown Data="@language" @bind-Value="@patronLanguage" Style="align-items:center" Change="ChooseLanguage" />
                                </label>
                            </div>


                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Section:</span>
                                    <RadzenDropDown Data="section" @bind-Value="@patronSection" Style="align-items:center" Change="ChooseSection" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Status:</span>
                                    <RadzenDropDown Data="@status" @bind-Value="@patronStatus" Style="align-items:center" Change="ChooseStatus" />
                                </label>
                            </div>


                            <div class="form-group">
                                <label for="registration-date">*Registration Date:</label>
                                <InputDate id="date" @bind-Value="patron.RegistrationDate" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="username">*Username:</label>
                                <InputText id="username" @bind-Value="patron.UserName" class="form-control" placeholder="Enter Patron Username" />
                            </div>

                            <div class="form-group">
                                <label for="password">*Password:</label>
                                <InputText type="password" id="password" @bind-Value="patron.Password" class="form-control" placeholder="Enter Patron Password" />
                            </div>

                            <div class="form-group">
                                <label for="type">*Patron Type: </label>
                                <Select @onchange="patronChange">
                                    <option value="">Select Type</option>
                                    @foreach (var type in Enum.GetValues(typeof(PatronType)))
                                    {


                                        <option value="@(type)"> @(type)</option>
                                    }
                                </Select>
                            </div>
                            <br>


                            <div class="form-group">
                                <label for="type">Image File: </label>
                                <RadzenFileInput @bind-Value="patron.ImageFile" Style="width:400px" TValue="string" />

                            </div>
                            <br>

                            <div class="form-group">
                                <label for="remark">Remark: </label>
                                <RadzenTextArea @bind-Value="patron.Remark" Cols="30" Rows="3" Style="align-items:center" />
                            </div>

                            <br>
                            <div class="form-group">
                                <label style="display: flex; align-items: center" for="library">
                                    <span style="margin-right: 32px">*Library: </span>
                                    <RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Library"
                                                    LoadData="@LibraryLoadData" AllowFiltering="true"
                                                    Data="@patronLibrary" TextProperty="Name" ValueProperty="LibraryId" Style="margin-bottom: 20px" @bind-Value="patron.LibraryId"
                                                    Change="@(args => LibraryChange(args, "DropDown with custom filtering"))" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Address:</span>
                                    <RadzenDropDown AllowClear="true" TValue="int"
                                                    LoadData="@LoadData" AllowFiltering="true"
                                                    Data="@patronAddress" TextProperty="StreetName" ValueProperty="AddressId" Style="margin-bottom: 20px" Placeholder="Select..." @bind-Value="patron.AddressId"
                                                    Change="@(args => Change(args, "Address DropDown "))" />
                                </label>
                            </div>

                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Patrons" class="btn btn-outline-secondary">Cancel</a>
                            <div class="mt-4"></div>
                        </EditForm>
                    </fieldset>
                </div>
            </div>

            <div class="container-fluid container-contact100" style="visibility:@Studentvisible;">
                <div class="wrap-contact100">
                    <h3>Student</h3>
                    <fieldset>
                        <EditForm Model="student" OnValidSubmit="CreateStudent">
                            <DataAnnotationsValidator />
                            <ValidationSummary />


                            <div class="form-group">
                                <label for="student-id">*Student Id:</label>
                                <InputNumber id="student-id" @bind-Value="student.StudentId" class="form-control" placeholder="Enter Student school Id" />
                            </div>

                            <div class="form-group">
                                <label for="year">*Class Year:</label>
                                <InputText id="year" @bind-Value="student.ClassYear" class="form-control" placeholder="Enter Student's Class Year" />
                            </div>


                            <div class="form-group">
                                <label for="class-name">*Class Name:</label>
                                <InputText id="class-name" @bind-Value="student.ClassName" class="form-control" placeholder="Enter Student's Class Name" />
                            </div>

                            <div class="form-group">
                                <label for="home-room-teacher">*Home Room Teacher Name:</label>
                                <InputText id="home-room-teacher" @bind-Value="student.HomeRoomTeacher" class="form-control" placeholder="Enter Student's Home Room Teacher Name" />
                            </div>

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Age Level:</span>
                                    <RadzenDropDown Data="@ageLevel" @bind-Value="@studentAgeLevel" Change="ChooseAgeLevel" />
                                </label>
                            </div>


                            <div class="mt-4"></div>
                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Parents" class="btn btn-outline-secondary">Cancel</a>
                        </EditForm>
                    </fieldset>
                </div>
            </div>
            <br><br><br>
            <div class="container-fluid container-contact100" style="visibility:@Teachervisible;margin-top:-800px">
                <div class="wrap-contact100">
                    <h3>Teacher</h3>
                    <fieldset>
                        <EditForm Model="teacher" OnValidSubmit="CreateTeacher">
                            <DataAnnotationsValidator />
                            <ValidationSummary />


                            <div class="form-group">
                                <label for="student-id">*Employee Id:</label>
                                <InputNumber id="student-id" @bind-Value="teacher.EmployeeId" class="form-control" placeholder="Enter Employee school Id" />
                            </div>

                            <div class="mt-4"></div>
                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Patrons" class="btn btn-outline-secondary">Cancel</a>
                        </EditForm>
                    </fieldset>
                </div>
            </div>
            <br><br><br>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>




@code {
    Patron patron = new Patron();

    private List<Patron> patrons = new List<Patron>();



    // Execute when component starts / initializes
    protected override void OnInitialized()
    {

        patrons = PatronService.GetPatrons();
        students = StudentService.GetStudents();
        teachers = TeacherService.GetTeachers();
        addresses = AddressService.GetAddresses();

    }


    // Creating and Adding a new patron to the database
    private void CreatePatron()
    {

        PatronService.AddNewPatron(patron);

        // To empty the form
        patron = new Patron();

        //Geeting patron Id
        GetPatronId();


    }

    private void GetPatronId()
    {
        //get the library material id and binding it with the book
        SharedVariables.AcquirePatronId = db.Patron.OrderBy(d => d.PatronId).LastOrDefault().PatronId;


    }
}

@code {
    Student student = new Student();

    private List<Student> students = new List<Student>();

    // Creating and Adding a new student to the database
    private void CreateStudent()
    {
        //get the patron id and binding it with the student
        student.PatronId = SharedVariables.AcquirePatronId;

        //Add student
        StudentService.AddNewStudent(student);

        // To empty the form
        student = new Student();

        // May navigate to the Patron component
        NavigationManager.NavigateTo("/Patrons");
    }
}

@code {

    Teacher teacher = new Teacher();

    private List<Teacher> teachers = new List<Teacher>();

    // Creating and Adding a new teacher to the database
    private void CreateTeacher()
    {
        //get the patron id and binding it with the teacher
        teacher.PatronId = SharedVariables.AcquirePatronId;

        //Add Teacher
        TeacherService.AddNewTeacher(teacher);

        // To empty the form
        teacher = new Teacher();

        // May navigate to the patron component
        NavigationManager.NavigateTo("/Patrons");
    }
}

@code {

    Address address = new Address();

    private List<Address> addresses = new List<Address>();

    // Creating and Adding a new address to the database
    private void CreateAddress()
    {

        AddressService.AddNewAddress(address);

        // To empty the form
        address = new Address();

        // May navigate to the Employees component
        NavigationManager.NavigateTo("/Libraries");
    }
}




@code
{

    //code section for input select

    LMSDbContext db = new LMSDbContext();

    string patronType { get; set; }



    string Teachervisible = "hidden";
    string Studentvisible = "hidden";
    //private List<Patron> patronType;
    private List<Student> StudentForm;
    private List<Teacher> TeacherForm;

    //Method to change patron type
    private void patronChange(ChangeEventArgs patronEvent)
    {
        patronType = (patronEvent.Value.ToString());

        if (patronType == "Student")
        {
            Studentvisible = "visible";
            Teachervisible = "hidden";

            patron.PatronType = 1;
        }

        else if (patronType == "Teacher")
        {
            Teachervisible = "visible";
            Studentvisible = "hidden";

            patron.PatronType = 2;
        }



    }

}


@code{

    //Code Section for DropDown Lists

    IEnumerable<Address> patronAddress;
    IEnumerable<Library> patronLibrary;
    IEnumerable<Patron> patronList;

    //Address Drop Down List Methods
    void Change(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void LoadData(LoadDataArgs args)
    {
        var query = DbContext.Address.AsQueryable();


        patronAddress = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //Library Drop Down List Methods
    void LibraryChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void LibraryLoadData(LoadDataArgs args)
    {
        var query = DbContext.Library.AsQueryable();


        patronLibrary = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //patron Drop Down List Methods
    void patronChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();
    }

    void patronLoadData(LoadDataArgs args)
    {
        var query = DbContext.Patron.AsQueryable();


        patronList = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //Code for gender drop down list
    IEnumerable<PatronGender> gender = Enum.GetValues(typeof(PatronGender)).Cast<PatronGender>();

    int genderValue;

    PatronGender patronGender;

    //Method For biding the value to the database
    public void ChooseGender()
    {
        genderValue = (int)patronGender;
        patron.Gender = genderValue;
    }

    //Code for language drop down list
    IEnumerable<PatronLanguage> language = Enum.GetValues(typeof(PatronLanguage)).Cast<PatronLanguage>();

    int languageValue;

    PatronLanguage patronLanguage = PatronLanguage.English;

    //Method For biding the value to the database
    public void ChooseLanguage()
    {
        languageValue = (int)patronLanguage;
        patron.Language = languageValue;
    }


    //Code for patron type drop down list
    IEnumerable<PatronType> type = Enum.GetValues(typeof(PatronType)).Cast<PatronType>();

    int typeValue;

    PatronType typeOfPatron;

    //Method For biding the value to the database
    public void ChooseType()
    {
        typeValue = (int)typeOfPatron;
        patron.PatronType = typeValue;
    }

    //Code for section drop down list
    IEnumerable<PatronSection> section = Enum.GetValues(typeof(PatronSection)).Cast<PatronSection>();

    int sectionValue;

    PatronSection patronSection;

    //Method For biding the value to the database
    public void ChooseSection()
    {
        sectionValue = (int)patronSection;
        patron.Section = sectionValue;
    }

    //Code for status drop down list
    IEnumerable<PatronStatus> status = Enum.GetValues(typeof(PatronStatus)).Cast<PatronStatus>();

    int statusValue;

    PatronStatus patronStatus = PatronStatus.Active;

    //Method For biding the value to the database
    public void ChooseStatus()
    {
        statusValue = (int)patronStatus;
        patron.Status = statusValue;
    }


    //Code for age level drop down list
    IEnumerable<StudentAgeLevel> ageLevel = Enum.GetValues(typeof(StudentAgeLevel)).Cast<StudentAgeLevel>();

    int ageLevelValue;

    StudentAgeLevel studentAgeLevel;

    //Method For biding the value to the database
    public void ChooseAgeLevel()
    {
        ageLevelValue = (int)studentAgeLevel;
        student.AgeLevel = ageLevelValue;
    }
}