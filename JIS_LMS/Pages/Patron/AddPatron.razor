
@page "/Patron/Add"

@using JIS_LMS.Data;
@using JIS_LMS.Model;
@layout SystemAdminLayout

@inject PatronService PatronService
@inject StudentService StudentService
@inject TeacherService TeacherService
@inject AddressService AddressService
@inject NavigationManager NavigationManager
@inject LMSDbContext DbContext


<RadzenTabs>

    <Tabs>
        <RadzenTabsItem Text="Add Address">
            <div class="container-fluid container-contact100">
                <div class="wrap-contact100">

                    <fieldset>
                        <legend>Add Patron Address</legend>
                        <EditForm Model="address" OnValidSubmit="CreateAddress">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="building-number">*Building Number:</label>
                                <InputNumber id="building-number" @bind-Value="address.BuildingNumber" class="form-control" placeholder="Enter Building Number" />
                            </div>

                            <div class="form-group">
                                <label for="unit-number">Unit Number:</label>
                                <InputNumber id="unit-number" @bind-Value="address.UnitNumber" class="form-control" placeholder="Enter Unit Number" />
                            </div>

                            <div class="form-group">
                                <label for="street-name">*Street Name:</label>
                                <InputText id="street-name" @bind-Value="address.StreetName" class="form-control" placeholder="Enter Street Name" />
                            </div>

                            <div class="form-group">
                                <label for="zip-code">Zip Code:</label>
                                <InputText id="zip-code" @bind-Value="address.ZipCode" class="form-control" placeholder="Enter Zip Code" />
                            </div>

                            <div class="form-group">
                                <label for="city">*City:</label>
                                <InputText id="city" @bind-Value="address.City" class="form-control" placeholder="Enter City" />
                            </div>

                            <div class="form-group">
                                <label for="country">*Country:</label>
                                <InputText id="country" @bind-Value="address.Country" class="form-control" placeholder="Enter Country" />
                            </div>
                            <br />


                            <div class="mt-4"></div>
                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Parents" class="btn btn-outline-secondary">Cancel</a>
                        </EditForm>
                    </fieldset>
                </div>
            </div>
            <br><br><br>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Add Patron">
            <div class="container-fluid container-contact100">
                <div class="wrap-contact100">

                    <fieldset>
                        <legend>Add New Patron</legend>
                        <EditForm Model="patron" OnValidSubmit="CreatePatron">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="first-name">*First Name:</label>
                                <InputText id="first-name" @bind-Value="patron.FirstName" class="form-control" placeholder="Enter Patron Fisrt Name" />
                            </div>

                            <div class="form-group">
                                <label for="middle-name">Middle Name:</label>
                                <InputText id="middle-name" @bind-Value="patron.MiddleName" class="form-control" placeholder="Enter Patron Middle Name" />
                            </div>

                            <div class="form-group">
                                <label for="last-name">*Last Name:</label>
                                <InputText id="last-name" @bind-Value="patron.LastName" class="form-control" placeholder="Enter Patron Last Name" />
                            </div>



                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Gender:</span>
                                    <RadzenDropDown Data="@gender" @bind-Value="patron.Gender" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label for="dateOfBirth">*Date Of Birth:</label>
                                <InputDate id="date" @bind-Value="patron.DateOfBirth" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="Primary Contact Number">*Primary Contact Number:</label>
                                <InputText id="Primary Contact Number" @bind-Value="patron.PrimaryContactNumber" class="form-control" placeholder="0500000000" />
                            </div>

                            <div class="form-group">
                                <label for="Secondary Contact Number">Secondary Contact Number:</label>
                                <InputText id="Secondary Contact Number" @bind-Value="patron.SecondaryContactNumber" class="form-control" placeholder="0500000000" />
                            </div>

                            <div class="form-group">
                                <label for="email" class="control-label">*Primary Email: </label>
                                <InputText type="email" id="email" @bind-Value="patron.PrimaryEmail" class="form-control" placeholder="sam@example.com" />
                                <ValidationMessage For="@(() => patron.PrimaryEmail)" />
                            </div>

                            <div class="form-group">
                                <label for="email" class="control-label">Secondary Email: </label>
                                <InputText type="email" id="email" @bind-Value="patron.SecondaryEmail" class="form-control" placeholder="sam@example.com" />
                                <ValidationMessage For="@(() => patron.SecondaryEmail)" />
                            </div>


                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Language:</span>
                                    <RadzenDropDown Data="@language" @bind-Value="patron.Language" Style="align-items:center" />
                                </label>
                            </div>


                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Section:</span>
                                    <RadzenDropDown Data="@patronSection" @bind-Value="patron.Section" Style="align-items:center" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Status:</span>
                                    <RadzenDropDown Data="@status" @bind-Value="patron.Status" Style="align-items:center" />
                                </label>
                            </div>


                            <div class="form-group">
                                <label for="registration-date">*Registration Date:</label>
                                <InputDate id="date" @bind-Value="patron.RegistrationDate" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="username">*Username:</label>
                                <InputText id="username" @bind-Value="patron.UserName" class="form-control" placeholder="Enter Patron Username" />
                            </div>

                            <div class="form-group">
                                <label for="password">*Password:</label>
                                <InputText type="password" id="password" @bind-Value="patron.Password" class="form-control" placeholder="Enter Patron Password" />
                            </div>

                            <div class="form-group">
                                <label for="type">*Patron Type: </label>
                                <Select @onchange="patronChange">
                                    <option value="">Select Type</option>
                                    @foreach (var type in Enum.GetValues(typeof(PatronType)))
                                    {


                                        <option value="@(type)"> @(type)</option>
                                    }
                                </Select>
                            </div>
                            <br>


                            <div class="form-group">
                                <label for="type">Image File: </label>
                                <RadzenFileInput @bind-Value="patron.ImageFile" Style="width:400px" TValue="string" />

                            </div>
                            <br>

                            <div class="form-group">
                                <label for="remark">Remark: </label>
                                <RadzenTextArea @bind-Value="patron.Remark" Cols="30" Rows="3" Style="align-items:center" />
                            </div>

                            <br>
                            <div class="form-group">
                                <label style="display: flex; align-items: center" for="library">
                                    <span style="margin-right: 32px">*Library: </span>
                                    <RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Library"
                                                    LoadData="@LibraryLoadData" AllowFiltering="true"
                                                    Data="@patronLibrary" TextProperty="Name" ValueProperty="LibraryId" Style="margin-bottom: 20px" @bind-Value="patron.LibraryId"
                                                    Change="@(args => LibraryChange(args, "DropDown with custom filtering"))" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Address:</span>
                                    <RadzenDropDown AllowClear="true" TValue="int"
                                                    LoadData="@LoadData" AllowFiltering="true"
                                                    Data="@patronAddress" TextProperty="StreetName" ValueProperty="AddressId" Style="margin-bottom: 20px" Placeholder="Select..." @bind-Value="patron.AddressId"
                                                    Change="@(args => Change(args, "Address DropDown "))" />
                                </label>
                            </div>

                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Patrons" class="btn btn-outline-secondary">Cancel</a>
                            <div class="mt-4"></div>
                        </EditForm>
                    </fieldset>
                </div>
            </div>

            <div class="container-fluid container-contact100" style="visibility:@Studentvisible;">
                <div class="wrap-contact100">

                    <fieldset>
                        <legend>Student</legend>
                        <EditForm Model="student" OnValidSubmit="CreateStudent">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*patron:</span>
                                    <RadzenDropDown AllowClear="true" TValue="int"
                                                    LoadData="@patronLoadData" AllowFiltering="true"
                                                    Data="@patronList" TextProperty="FullName" ValueProperty="PatronId" Style="margin-bottom: 20px;width:300px" Placeholder="Select Patron" @bind-Value="student.PatronId"
                                                    Change="@(args => patronChange(args, "patron DropDown "))" />
                                </label>
                            </div>


                            <div class="form-group">
                                <label for="student-id">*Student Id:</label>
                                <InputNumber id="student-id" @bind-Value="student.StudentId" class="form-control" placeholder="Enter Student school Id" />
                            </div>

                            <div class="form-group">
                                <label for="year">*Class Year:</label>
                                <InputText id="year" @bind-Value="student.ClassYear" class="form-control" placeholder="Enter Student's Class Year" />
                            </div>


                            <div class="form-group">
                                <label for="class-name">*Class Name:</label>
                                <InputText id="class-name" @bind-Value="student.ClassName" class="form-control" placeholder="Enter Student's Class Name" />
                            </div>

                            <div class="form-group">
                                <label for="home-room-teacher">*Home Room Teacher:</label>
                                <InputText id="home-room-teacher" @bind-Value="student.HomeRoomTeacher" class="form-control" placeholder="Enter Student's Home Room Teacher" />
                            </div>

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*Age Level:</span>
                                    <RadzenDropDown Data="@ageLevel" @bind-Value="student.AgeLevel" />
                                </label>
                            </div>


                            <div class="mt-4"></div>
                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Parents" class="btn btn-outline-secondary">Cancel</a>
                        </EditForm>
                    </fieldset>
                </div>
            </div>
            <br><br><br>
            <div class="container-fluid container-contact100" style="visibility:@Teachervisible;margin-top:-800px">
                <div class="wrap-contact100">

                    <fieldset>
                        <legend>Teacher</legend>
                        <EditForm Model="teacher" OnValidSubmit="CreateTeacher">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label style="display: flex; align-items: center">
                                    <span style="margin-right: 32px">*patron:</span>
                                    <RadzenDropDown AllowClear="true" TValue="int"
                                                    LoadData="@patronLoadData" AllowFiltering="true"
                                                    Data="@patronList" TextProperty="FullName" ValueProperty="PatronId" Style="margin-bottom: 20px;width:300px" Placeholder="Select Patron" @bind-Value="teacher.PatronId"
                                                    Change="@(args => patronChange(args, "patron DropDown "))" />
                                </label>
                            </div>

                            <div class="form-group">
                                <label for="student-id">*Employee Id:</label>
                                <InputNumber id="student-id" @bind-Value="teacher.EmployeeId" class="form-control" placeholder="Enter Employee school Id" />
                            </div>

                            <div class="mt-4"></div>
                            <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                            <a href="Patrons" class="btn btn-outline-secondary">Cancel</a>
                        </EditForm>
                    </fieldset>
                </div>
            </div>
            <br><br><br>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>




@code {
    Patron patron = new Patron();

    private List<Patron> patrons = new List<Patron>();



    // Execute when component starts / initializes
    protected override void OnInitialized()
    {

        patrons = PatronService.GetPatrons();
        students = StudentService.GetStudents();
        teachers = TeacherService.GetTeachers();
        addresses = AddressService.GetAddresses();

    }



    private void CreatePatron()
    {

        PatronService.AddNewPatron(patron);

        // To empty the form, find more elegant why
        patron = new Patron();

       
    }
}

@code {
    Student student = new Student();

    private List<Student> students = new List<Student>();


    private void CreateStudent()
    {

        StudentService.AddNewStudent(student);

        // To empty the form, find more elegant why
        student = new Student();

        // May navigate to the Patron component
        NavigationManager.NavigateTo("/Patrons");
    }
}

@code {
    Teacher teacher = new Teacher();

    private List<Teacher> teachers = new List<Teacher>();


    private void CreateTeacher()
    {

        TeacherService.AddNewTeacher(teacher);

        // To empty the form, find more elegant why
        teacher = new Teacher();

        // May navigate to the patron component
        NavigationManager.NavigateTo("/Patrons");
    }
}

@code {
    Address address = new Address();



    private List<Address> addresses = new List<Address>();

    // Execute when component starts / initializes
    //protected override void OnInitialized()
    //{

    //    addresses = AddressService.GetAddresses();
    //}



    private void CreateAddress()
    {


        AddressService.AddNewAddress(address);

        // To empty the form, find more elegant why
        address = new Address();

        // May navigate to the Employees component
        NavigationManager.NavigateTo("/Libraries");
    }
}




@code
{

    //code section for input select

    LMSDbContext db = new LMSDbContext();

    string patronType { get; set; }



    string Teachervisible = "hidden";
    string Studentvisible = "hidden";
    //private List<Patron> patronType;
    private List<Student> StudentForm;
    private List<Teacher> TeacherForm;

    //Method to change patron type
    private void patronChange(ChangeEventArgs patronEvent)
    {
        patronType = (patronEvent.Value.ToString());

        if (patronType == "Student")
        {
            Studentvisible = "visible";
            Teachervisible = "hidden";
        }

        else if (patronType == "Teacher")
        {
            Teachervisible = "visible";
            Studentvisible = "hidden";
        }



    }

}


@code{

    IEnumerable<Address> patronAddress;
    IEnumerable<Library> patronLibrary;
    IEnumerable<Patron> patronList;

    void Change(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void LoadData(LoadDataArgs args)
    {
        var query = DbContext.Address.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        patronAddress = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    void LibraryChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void LibraryLoadData(LoadDataArgs args)
    {
        var query = DbContext.Library.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        patronLibrary = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    void patronChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void patronLoadData(LoadDataArgs args)
    {
        var query = DbContext.Patron.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        patronList = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //Code for gender drop down list
    IEnumerable<PatronGender> gender = Enum.GetValues(typeof(PatronGender)).Cast<PatronGender>();

    //Code for language drop down list
    IEnumerable<PatronLanguage> language = Enum.GetValues(typeof(PatronLanguage)).Cast<PatronLanguage>();


    //Code for employee type drop down list
    IEnumerable<PatronType> type = Enum.GetValues(typeof(PatronType)).Cast<PatronType>();

    //Code for section drop down list
    IEnumerable<PatronSection> patronSection = Enum.GetValues(typeof(PatronSection)).Cast<PatronSection>();

    //Code for status drop down list
    IEnumerable<PatronStatus> status = Enum.GetValues(typeof(PatronStatus)).Cast<PatronStatus>();

    //Code for type drop down list
    IEnumerable<PatronType> typePatron = Enum.GetValues(typeof(PatronType)).Cast<PatronType>();

    //Code for age level drop down list
    IEnumerable<StudentAgeLevel> ageLevel = Enum.GetValues(typeof(StudentAgeLevel)).Cast<StudentAgeLevel>();
}