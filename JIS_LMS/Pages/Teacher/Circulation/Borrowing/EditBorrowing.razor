@*Page Name:Edit Borrowing
    Page Description: This page is for edting a borrowing information*@


@page  "/Teacher/Borrowing/Edit/{Id:int}"
@layout TeacherLayout
@using JIS_LMS.Data;
@using JIS_LMS.Model;
@inject BorrowingService BorrowingService
@inject NavigationManager NavigationManager
@inject LMSDbContext DbContext


<div class="container-fluid container-contact100">
    <div class="wrap-contact100">
        <h3>Edit Borrowing Information</h3>
        <fieldset>

            <EditForm Model="borrowing" OnValidSubmit="UpdateBorrowing">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label style="display: flex; align-items: center; margin-top:2em;">
                        <span style="margin-right: 32px">*Patron:</span>
                        <RadzenDropDown AllowClear="true" TValue="int" LoadData="@patronLoadData" AllowFiltering="true"
                                        Data="@patronList" TextProperty="FullName" ValueProperty="PatronId" Style="margin-bottom: 10px;margin-left:4em;width:300px" Placeholder="Select Patron" @bind-Value="borrowing.PatronId"
                                        Change="@(args => patronChange(args, "patron DropDown "))" />
                    </label>
                </div>


                <div class="form-group">
                    <label for="borrowing-date-time">*Borrowing Date & Time:</label>
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="borrowing.BorrowingDateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                </div>

                <div class="form-group">
                    <label for="due-date-time">*Due Date & Time:</label>
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="borrowing.DueDateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Style="margin-left: 3em" />
                </div>

                <div class="form-group">
                    <label for="return-date-time">Return Date & Time:</label>
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="borrowing.ReturnDateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Style="margin-left: 2em" />
                </div>

                <div class="form-group">
                    <label for="renwal-date-time">Renwal Date & Time:</label>
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="borrowing.RenwalDateTime" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Style="margin-left: 2em" />
                </div>

                <div class="form-group">
                    <label for="type">*Signature File: </label>
                    <RadzenFileInput @bind-Value="borrowing.SignatureFile" Style="width:400px;margin-left: 1em" TValue="string" />

                </div>
                <br>

                <div class="form-group">
                    <label for="remark">Remark: </label>
                    <RadzenTextArea @bind-Value="borrowing.Remark" Cols="30" Rows="3" Style="align-items:center" Disabled="true"/>
                </div>

                <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                <a href="/Teacher/MyLibraryMaterials" class="btn btn-outline-secondary">Cancel</a>
                <div class="mt-4"></div>
            </EditForm>
        </fieldset>
    </div>
</div>


<br />

<p>@message</p>

@code {

    [Parameter]
    public int Id { get; set; }

    Borrowing borrowing = new Borrowing();

    string message;

    // Execute when component starts / initializes
    protected override void OnInitialized()
    {
        borrowing = BorrowingService.GetBorrowing(Id);
    }

    // Edting and updating the borrowing infromation 
    public void UpdateBorrowing()
    {
        // Edit Borrowing
        BorrowingService.EditBorrowing(borrowing);

        message = "Borrowing updated successfully";

        // May navigate to the Author Search Page
        NavigationManager.NavigateTo("/Teacher/MyLibraryMaterials");
    }
}

@code
{// code section for the drop down list to link the patron with the borrwoing

    IEnumerable<Patron> patronList;

    void patronChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;


        StateHasChanged();
    }

    void patronLoadData(LoadDataArgs args)
    {
        var query = DbContext.Patron.AsQueryable();

        patronList = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    // code section for the drop down list to link the library material with the borrwoing

    IEnumerable<Library_Material> materialList;

    void materialChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;


        StateHasChanged();
    }

    void materialLoadData(LoadDataArgs args)
    {
        var query = DbContext.Library_Material.AsQueryable();

        materialList = query.ToList();

        InvokeAsync(StateHasChanged);
    }

    //code for date and time input

    DateTime? value = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };



}


