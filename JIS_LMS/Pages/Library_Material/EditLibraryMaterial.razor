@layout SystemAdminLayout
@page "/Catalog/Edit/{Id:int}"
@using JIS_LMS.Data;
@using JIS_LMS.Model;
@using Syncfusion.Blazor.Inputs;
@inject Library_MaterialService Library_MaterialService
@inject CD_DVD_BR_Service CD_DVD_BR_Service
@inject BookService BookService
@inject JournalService JournalService
@inject NavigationManager NavigationManager
@inject LMSDbContext DbContext


<div class="container-fluid container-contact100">
    <div class="wrap-contact100">
        <h3>Edit Libray Material Information</h3>
        <fieldset>

            <EditForm Model="catalog" OnValidSubmit="UpdateLibraryMaterial">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="Acession-Number">*Accession Number:</label>
                    <InputNumber id="Acession-Number" @bind-Value="catalog.AccessionNumber" class="form-control" placeholder="Enter Library Material Accession Number" />
                </div>

                <div class="form-group">
                    <label for="date-aquired">Date Acquired:</label>
                    <InputDate id="date" @bind-Value="catalog.DateAcquired" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="date-Recorded">*Date Recorded:</label>
                    <InputDate id="date" @bind-Value="catalog.DateRecorded" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="Title">*Title:</label>
                    <InputText id="Title" @bind-Value="catalog.Title" class="form-control" placeholder="Enter Library Material Title" />
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center" for="publisher">
                        <span style="margin-right: 32px">*Publisher: </span>
                        <RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Publisher"
                                        LoadData="@PublisherLoadData" AllowFiltering="true"
                                        Data="@materialPublisher" TextProperty="Name" ValueProperty="PublisherId" Style="margin-bottom: 7px" @bind-Value="catalog.PublisherId"
                                        Change="@(args => PublisherChange(args, "DropDown with custom filtering"))" />
                        <a href="/Publisher/Add" class="btn btn-outline-primary" style="align-items:start; margin-left:1em">Add Publisher</a>

                    </label>
                </div>
                <br>

                @*<div class="form-group">
                        <label for="author">*Authors:</label>
                        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="@multipleValues" Data=@materialAuthor Multiple="true"
                                       TextProperty="FullName" ValueProperty="AuthorId" Change=@(args => AuthorOnChange(args, "ListBox with multiple selection")) Style="height:200px" />
                        <a href="/Author/Add" class="btn btn-outline-primary" style="align-items:start;margin-left:4.5em">Add Author</a>
                    </div>*@

                <div class="form-group">
                    <label style="display: flex; align-items: center" for="publisher">
                        <span style="margin-right: 32px">*Author/s: </span>
                        <RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Authors"
                                        LoadData="@AuthorLoadData" AllowFiltering="true"
                                        Data="@materialAuthor" TextProperty="FullName" ValueProperty="AuthorId" Style="margin-bottom: 7px" @bind-Value="author.AuthorId"
                                        Change="@(args => AuthorOnChange(args, "DropDown with custom filtering"))" />
                        <a href="/Author/Add" class="btn btn-outline-primary" style="align-items:start;margin-left:4.5em">Add Author</a>
                    </label>
                </div>

                <div class="form-group">
                    <label for="Pages-Number">Number Of Pages:</label>
                    <InputNumber id="Pages-Number" @bind-Value="catalog.NumberOfPages" class="form-control" placeholder="Enter Library Material Number of Pages" />
                </div>


                <div class="form-group">
                    <label for="source-of-fund">Source Of Fund:</label>
                    <InputText id="source-of-fund" @bind-Value="catalog.SourceOfFund" class="form-control" placeholder="Enter Library Material Source of Fund" />
                </div>

                <div class="form-group">
                    <label for="cost-price">Cost Price:</label>
                    <SfNumericTextBox TValue="decimal?" @bind-Value="catalog.CostPrice" Format="SAR"></SfNumericTextBox>
                </div>

                <div class="form-group">
                    <label for="year">*Year Published:</label>
                    <InputText id="year" @bind-Value="catalog.YearPublished" class="form-control" placeholder="Enter Library Material Year of publication " />
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Language:</span>
                        <RadzenDropDown Data="@language" @bind-Value="catalog.Language" Style="align-items:center" />
                    </label>
                </div>


                <div class="form-group">
                    <label for="subject">*Subject:</label>
                    <InputText id="subject" @bind-Value="catalog.Subject" class="form-control" placeholder="Enter Library Material Subject" />
                </div>

                <div class="form-group">
                    <label for="genre">*Genre:</label>
                    <InputText id="genre" @bind-Value="catalog.Genre" class="form-control" placeholder="Enter Library Material Genre" />
                </div>

                <div class="form-group">
                    <label for="translation">Subject Translation In English:</label>
                    <InputText id="translation" @bind-Value="catalog.SubjectTranslationInEnglish" class="form-control" placeholder="Enter Library Material Subject Translation In English" />
                </div>


                <div class="form-group">
                    <label for="city-published">City Published:</label>
                    <InputText id="city-published" @bind-Value="catalog.CityPublished" class="form-control" placeholder="Enter The City Where The Library Material Was Published" />
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Age Level:</span>
                        <RadzenDropDown Data="@ageLevel" @bind-Value="catalog.AgeLevel" />
                    </label>
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">*Status:</span>
                        <RadzenDropDown Data="@status" @bind-Value="catalog.Status" Style="align-items:center" />
                    </label>
                </div>

                <div class="form-group">
                    <label for="description">Description: </label>
                    <RadzenTextArea @bind-Value="catalog.Description" Cols="30" Rows="3" Style="align-items:center" />
                </div>

                <div class="form-group">
                    <label for="type">Image File: </label>
                    <RadzenFileInput @bind-Value="catalog.ImageFile" Style="width:400px" TValue="string" />

                </div>
                <br>

                <div class="form-group">
                    <label for="DOI-URL">DOI URL:</label>
                    <InputText id="city-published" @bind-Value="catalog.DOIURL" class="form-control" placeholder="https://doi.org/xxxxx" />
                </div>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">Restriction Type:</span>
                        <RadzenDropDown Data="@restrectionType" @bind-Value="catalog.RestrictionType" Style="align-items:center" />
                    </label>
                </div>

                <div class="form-group">
                    <label for="type">*Library Material Type: </label>
                    <Select @onchange="MaterialChange">
                        <option value="">Select Type</option>
                        @foreach (var type in Enum.GetValues(typeof(LibraryMaterialType)))
                        {


                            <option value="@(type)"> @(type)</option>
                        }
                    </Select>
                </div>

                <br>
                <div class="form-group">
                    <label style="display: flex; align-items: center" for="library">
                        <span style="margin-right: 32px">*Library: </span>
                        <RadzenDropDown AllowClear="true" TValue="int" Placeholder="Select Library"
                                        LoadData="@LibraryLoadData" AllowFiltering="true"
                                        Data="@materialLibrary" TextProperty="Name" ValueProperty="LibraryId" Style="margin-bottom: 20px" @bind-Value="catalog.LibraryId"
                                        Change="@(args => LibraryChange(args, "Library DropDown "))" />
                    </label>
                </div>
                <br>

                <div class="form-group">
                    <label style="display: flex; align-items: center">
                        <span style="margin-right: 32px">Donor:</span>
                        <RadzenDropDown AllowClear="true" TValue="int"
                                        LoadData="@DonorLoadData" AllowFiltering="true"
                                        Data="@materialDonor" TextProperty="FullName" ValueProperty="DonorId" Style="margin-bottom: 20px" Placeholder="Select..." @bind-Value="catalog.DonorId"
                                        Change="@(args => DonorChange(args, "Donor DropDown "))" />
                    </label>
                </div>
                <button type="submit" class="btn btn-outline-primary" style=" width: 80px;">Save</button>
                @*<a href="/Patron/Student/Edit/@Id" class="btn btn-outline-primary" role="button">Edit Student</a>*@
                <a href="/Patron/Search" class="btn btn-outline-secondary">Cancel</a>
                <div class="mt-4"></div>
            </EditForm>
        </fieldset>
    </div>
</div>


<br />

<p>@message</p>

@code {

    [Parameter]
    public int Id { get; set; }



    Library_Material catalog = new Library_Material();
    LibraryMaterial_Author author = new LibraryMaterial_Author();
    private List<Library_Material> library_Materials = new List<Library_Material>();



    string message;

    protected override void OnInitialized()
    {
        catalog = Library_MaterialService.GetLibraryMaterial(Id);

        //students = StudentService.GetStudents();

        //student = StudentService.GetStudent(Id);

    }


    public void UpdateLibraryMaterial()
    {

        // Edit Library Material
        Library_MaterialService.EditLibraryMaterial(catalog);

        message = "Library Material updated successfully";
        //NavigationManager.NavigateTo("Patrons/Search");
    }
}



@code
{

    //code section for input select type

    LMSDbContext db = new LMSDbContext();

    string libraryMaterialType { get; set; }



    string Bookvisible = "hidden";
    string Journalvisible = "hidden";
    string CD_DVD_BR_visible = "hidden";

    private List<Book> BookForm;
    private List<Journal> JournalForm;
    private List<CD_DVD_BR> CD_DVD_BRForm;

    //Method to change library Material type
    private void MaterialChange(ChangeEventArgs libraryMaterialEvent)
    {
        libraryMaterialType = (libraryMaterialEvent.Value.ToString());

        if (libraryMaterialType == "Book")
        {
            Bookvisible = "visible";
            Journalvisible = "hidden";
            CD_DVD_BR_visible = "hidden";
        }

        else if (libraryMaterialType == "Journal")
        {
            Journalvisible = "visible";
            Bookvisible = "hidden";
            CD_DVD_BR_visible = "hidden";
        }

        else if (libraryMaterialType == "CdDvdBr")
        {
            CD_DVD_BR_visible = "visible";
            Journalvisible = "hidden";
            Bookvisible = "hidden";

        }

    }

}


@code{

    //Code Section for DropDown Lists



    //Donor Drop Down List Methods

    IEnumerable<Donor> materialDonor;

    void DonorChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;


        StateHasChanged();
    }

    void DonorLoadData(LoadDataArgs args)
    {
        var query = DbContext.Donor.AsQueryable();


        //if (!string.IsNullOrEmpty(args.Filter))
        //{
        //    //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        //}

        materialDonor = query.ToList();

        InvokeAsync(StateHasChanged);
    }


    //Library Drop Down List Methods

    IEnumerable<Library> materialLibrary;

    void LibraryChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void LibraryLoadData(LoadDataArgs args)
    {
        var query = DbContext.Library.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        materialLibrary = query.ToList();

        InvokeAsync(StateHasChanged);
    }


    //Author List box Methods

    IEnumerable<Author> materialAuthor;

    void AuthorOnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        StateHasChanged();


    }

    void AuthorLoadData(LoadDataArgs args)
    {
        var query = DbContext.Author.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        materialAuthor = query.ToList();

        InvokeAsync(StateHasChanged);
    }




    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    string value = "ALFKI";

    //Publisher Drop Down List Methods

    IEnumerable<Publisher> materialPublisher;

    void PublisherChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void PublisherLoadData(LoadDataArgs args)
    {
        var query = DbContext.Publisher.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        materialPublisher = query.ToList();

        InvokeAsync(StateHasChanged);
    }


    //Picking the library material for the subtype and linking it to the librarymaterialId with a Drop Down List Methods

    IEnumerable<Library_Material> libraryMaterialList;

    void MaterialChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        //events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void MaterialLoadData(LoadDataArgs args)
    {
        var query = DbContext.Library_Material.AsQueryable();


        if (!string.IsNullOrEmpty(args.Filter))
        {
            //query = query.Where(c => c.AddressId.ToLower().Contains(args.Filter.ToLower()) || c.StreetName.ToLower().Contains(args.Filter.ToLower()));
        }

        libraryMaterialList = query.ToList();

        InvokeAsync(StateHasChanged);
    }


    //Code for language drop down list
    IEnumerable<LibraryMaterialLanguage> language = Enum.GetValues(typeof(LibraryMaterialLanguage)).Cast<LibraryMaterialLanguage>();


    //Code for Library Material type drop down list
    IEnumerable<LibraryMaterialType> type = Enum.GetValues(typeof(LibraryMaterialType)).Cast<LibraryMaterialType>();


    //Code for status drop down list
    IEnumerable<LibraryMaterialStatus> status = Enum.GetValues(typeof(LibraryMaterialStatus)).Cast<LibraryMaterialStatus>();

    //Code for Restrection type drop down list
    IEnumerable<RestrectionType> restrectionType = Enum.GetValues(typeof(RestrectionType)).Cast<RestrectionType>();

    //Code for age level drop down list
    IEnumerable<LibraryMaterialAgeLevel> ageLevel = Enum.GetValues(typeof(LibraryMaterialAgeLevel)).Cast<LibraryMaterialAgeLevel>();

    //Code for Book Type drop down list
    IEnumerable<BookType> bookType = Enum.GetValues(typeof(BookType)).Cast<BookType>();

    //Code for Journal Type drop down list
    IEnumerable<JournalType> journalType = Enum.GetValues(typeof(JournalType)).Cast<JournalType>();

    //Code for CD/DVD/BR Type drop down list
    IEnumerable<CD_DVD_BR_Type> cD_DVD_BR_Type = Enum.GetValues(typeof(CD_DVD_BR_Type)).Cast<CD_DVD_BR_Type>();



}